pragma solidity ^0.6.0;
pragma experimental ABIEncoderV2;

contract CryptoNames {
    // string[5][] private crypto_names;
    string[] public test;
    string public a;

    constructor() public {
        // crypto_names.push(["Alice", "Bob"]);   // generic characters
        // crypto_names.push(["duysydhsadhsadhsajdhjksahdjksahdjhsajkdhjashdkjashdjsahdjkashkjdhkajhdhsajkhdsahdjksahdkjahsk", "duysydhsadhsadhsajdhjksahdjksahdjhsajkdhjashdkjashdjsahdjkashkjdhkajhdhsajkhdsahdjksahdkjahsk"]);  // 3rd and 4th party
        // crypto_names.push(["Eve", "Frank"]);   // Bad guys
        // crypto_names.push(["Grace", "Heidi"]); // others
    }
   function rantRandom() public {
        test.push(uintToStr(genRandom(100000)));
    }
    // function getAddress() external view returns(string memory){
    //     return string(msg.sender);
    // }
    
    function toBytes() public returns (string memory) {
    a= subString(string(toAsciiString(msg.sender)),uintToStr(genRandom(10000)));
}

  function toAsciiString(address x) public returns  (string memory) {
    bytes memory s = new bytes(40);
    for (uint i = 15; i < 20; i++) {
        byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));
        byte hi = byte(uint8(b) / 16);
        byte lo = byte(uint8(b) - 16 * uint8(hi));
        s[2*i] = char(hi);
        s[2*i+1] = char(lo);            
    }
    return string(s);
}

function char(byte b)public returns (byte c) {
    if (uint8(b) < 10) return byte(uint8(b) + 0x30);
    else return byte(uint8(b) + 0x57);
}
    //  function getAllUser() external view returns (string[] memory) {
    //     return test;
    // }
    // function getRow(uint256 row) external view returns (string memory){
    //     string memory buff ;
    //     for(uint256 i =0;i<row;i++){
    //         buff = subString(buff,string(abi.encodePacked('{"name":"',crypto_names[1][1],'","name2":"',crypto_names[1][1],'","name3":"duysydhsadhsadhsajdhjksahdjksahdjhsajkdhjashdkjashdjsahdjkashkjdhkajhdhsajkhdsahdjksahdkjahsk"}')));
    //         if(i<row-1){
    //             buff=subString(buff,",");
    //         }
    //     }
    //     return(string(abi.encodePacked("[",buff,"]")));
    // }
     function subString(string memory a,string memory b) private view returns (string memory){
        return string(abi.encodePacked(a,b));
    }
    
    function gettime() public view returns (string memory){
        return subString(uintToStr(now),uintToStr(genRandom(1000)));
    }
    function genRandom(uint mod) public view returns (uint) {
    return uint(keccak256(abi.encodePacked(now,msg.sender,block.difficulty)))%mod;
    }

    function uintToStr(uint _i) internal pure returns (string memory _uintAsString) {
        uint number = _i;
        if (number == 0) {
            return "0";
        }
        uint j = number;
        uint len;
        while (j != 0) {
            len++;
            j /= 10;
        }
        bytes memory bstr = new bytes(len);
        uint k = len - 1;
        while (number != 0) {
            bstr[k--] = byte(uint8(48 + number % 10));
            number /= 10;
        }
        return string(bstr);
    }
    
function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {
        uint8 i = 0;
        while(i < 32 && _bytes32[i] != 0) {
            i++;
        }
        bytes memory bytesArray = new bytes(i);
        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {
            bytesArray[i] = _bytes32[i];
        }
        return string(bytesArray);
    }
    
}