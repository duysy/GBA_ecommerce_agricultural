pragma solidity ^0.5.0;
pragma experimental ABIEncoderV2;
contract CryptoNames {
    string[5][] private crypto_names;

    constructor() public {
        crypto_names.push(["Alice", "Bob"]);   // generic characters
        crypto_names.push(["duysydhsadhsadhsajdhjksahdjksahdjhsajkdhjashdkjashdjsahdjkashkjdhkajhdhsajkhdsahdjksahdkjahsk", "duysydhsadhsadhsajdhjksahdjksahdjhsajkdhjashdkjashdjsahdjkashkjdhkajhdhsajkhdsahdjksahdkjahsk"]);  // 3rd and 4th party
        crypto_names.push(["Eve", "Frank"]);   // Bad guys
        crypto_names.push(["Grace", "Heidi"]); // others
    }
    function getRow(uint256 row) external view returns (string memory){
        string memory buff ;
        for(uint256 i =0;i<row;i++){
            buff = subString(buff,string(abi.encodePacked('{"name":"',crypto_names[1][1],'","name2":"',crypto_names[1][1],'","name3":"duysydhsadhsadhsajdhjksahdjksahdjhsajkdhjashdkjashdjsahdjkashkjdhkajhdhsajkhdsahdjksahdkjahsk"}')));
            if(i<row-1){
                buff=subString(buff,",");
            }
        }
        return(string(abi.encodePacked("[",buff,"]")));
    }
     function subString(string memory a,string memory b) private view returns (string memory){
        return string(abi.encodePacked(a,b));
    }
    
}